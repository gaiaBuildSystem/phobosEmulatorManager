import {
    Button,
    HorizontalBox,
    VerticalBox,
    GridBox,
    ListView,
    AboutSlint,
    StandardListView,
    ScrollView,
    LineEdit,
    CheckBox,
    SpinBox
 } from "std-widgets.slint";

import {
    CustomProgressIndicator
} from "components/CustomProgressIndicator.slint";


export component AppWindow inherits Window {
    in-out property<bool> canCreateInstances : false;
    in-out property<length> Width : 599px;
    in-out property<length> Height : 799px;
    in-out property<int> storageSize : 8;
    in-out property<int> ramSize : 4;
    in-out property<int> instances : 1;
    in-out property<bool> running : false;
    in-out property<bool> settled : false;
    in-out property<bool> initializing : true;
    in-out property<string> runningMessage : "Running ...";
    in-out property<string> messageFooterText : "Emulator Manager";
    in-out property<string> messageFooterLevel : "warn";
    in-out property<int> backDeg : 40;
    in-out property<[string]> emulatorList : [
        "Emulator 1",
        "Emulator 2",
        "Emulator 3",
        "Emulator 4",
        "Emulator 5",
        "Emulator 6",
        "Emulator 7",
        "Emulator 8"
    ];
    callback startEmulator();
    callback storeEmulator(emulatorName: string) -> bool;
    callback rmStoredEmulator(emulatorName: string) -> bool;
    callback runStoredEmulator(emulatorName: string);

    property<bool> _newEmulatorOpen: false;
    property<bool> _messageFooterOpen: false;
    property<bool> _listEmulatorsOpen: false;

    title: "PhobOS Emulator Manager";

    width <=> root.Width;
    height <=> root.Height;

    function _isClickUnderWidget(
        event: {
            mouse-x: int, mouse-y: int
        },
        widget: {
            x: int, y: int,
            width: int, height: int
        }
    ) -> bool {
        if (widget.x < event.mouse-x && widget.x + widget.width > event.mouse-x &&
            widget.y < event.mouse-y && widget.y + widget.height > event.mouse-y) {
            return true;
        }
        return false;
    }

    Rectangle {
        background: @linear-gradient(backDeg * -1deg, #810c35, #3c0c1d,);
    }

    TouchArea {
        pointer-event => {
            backDeg = ((self.mouse-x / self.height) * 180);
        }
        clicked => {
            if (_newEmulatorOpen && !_isClickUnderWidget({
                mouse-x: self.mouse-x / 1px,
                mouse-y: self.mouse-y / 1px
            }, {
                x: newEmulator.x / 1px,
                y: newEmulator.y / 1px,
                width: newEmulator.width / 1px,
                height: newEmulator.height / 1px
            })) {
                _newEmulatorOpen = false;
            }

            if (_messageFooterOpen && !_isClickUnderWidget({
                mouse-x: self.mouse-x / 1px,
                mouse-y: self.mouse-y / 1px
            }, {
                x: messageFooter.x / 1px,
                y: messageFooter.y / 1px,
                width: messageFooter.width / 1px,
                height: messageFooter.height / 1px
            })) {
                _messageFooterOpen = false;
            }

            if (_listEmulatorsOpen && !_isClickUnderWidget({
                mouse-x: self.mouse-x / 1px,
                mouse-y: self.mouse-y / 1px
            }, {
                x: listEmulators.x / 1px,
                y: listEmulators.y / 1px,
                width: listEmulators.width / 1px,
                height: listEmulators.height / 1px
            })) {
                _listEmulatorsOpen = false;
            }
        }
    }

    public function __init() {
        debug("Initializing ...");
        vmLogo.opacity = 0.6;
        vmLogo.padding-right = 5px;
        phobosLogo.opacity = 0.6;
        initializing = false;
    }

    // I will not use the init because on Linux it demands some time
    // to render the window, so I'm using the __init from code behind
    // init => {

    // }

    VerticalLayout {
        alignment: LayoutAlignment.start;
        padding-top: 50px;
        spacing: 10px;

        HorizontalLayout {
            alignment: LayoutAlignment.center;
            padding-top: 30px;

            vmLogo := HorizontalBox {
                padding-top: -8px;
                padding-right: -40px;
                padding-left: -2px;
                opacity: 0;

                Image {
                    source: @image-url("./assets/monitor.png");
                    width: 110px;
                    height: 110px;
                }

                animate padding-right {
                    duration: 500ms;
                    delay: 1.5s;
                    easing: ease-in-out;
                }

                animate opacity  {
                    duration: 500ms;
                    delay: 1.5s;
                    easing: ease-in-out;
                }
            }

            phobosLogo := HorizontalBox {
                padding-right: 10px;
                padding-top: 18px;
                padding-left: 10px;
                opacity: 0;

                Image {
                    source: @image-url("./assets/phoboslogoWhite.png");
                    width: 410px * 0.7;
                    height: 81px * 0.7;
                }

                animate opacity  {
                     duration: 500ms;
                     delay: 1.5s;
                     easing: ease-in-out;
                }
            }
        }
    }

    VerticalLayout {
        alignment: LayoutAlignment.end;
        spacing: 10px;
        padding-bottom: 60px;

        HorizontalLayout {
            x: storageSizeInput.x;

            Text {
                text: "Storage Size (GB):";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            storageSizeInput := SpinBox {
                value <=> storageSize;
                enabled: !running;
                width: 400px;
                height: 40px;
            }
        }

        HorizontalLayout {
            x: ramSizeInput.x;

            Text {
                text: "RAM Size (GB):";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            ramSizeInput := SpinBox {
                value <=> ramSize;
                enabled: !running;
                width: 400px;
                height: 40px;
            }
        }

        HorizontalLayout {
            x: ramSizeInput.x;
            padding-top: 20px;

            canCreateInstancesCheck := CheckBox {
                text: "Start Multiple Instances";
                checked <=> canCreateInstances;
                toggled => {
                    instances = 1;
                }
            }
        }

        HorizontalLayout {
            padding-top: 20px;
            x: ramSizeInput.x;

            Text {
                text: "Number of Instances:";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            instancesInput := SpinBox {
                enabled: canCreateInstances && !running;
                value <=> instances;
                width: 400px;
                height: 40px;
            }
        }

        if (running == false) :
        HorizontalLayout {
            alignment: LayoutAlignment.center;
            padding-top: 40px;

            buttons := VerticalBox {
                buttonStart := Button {
                    text: "START EMULATOR";
                    width: 400px;
                    height: 40px;
                    enabled: storageSize > 0 && ramSize > 0 && instances > 0 && !running && !initializing && !_newEmulatorOpen && !_listEmulatorsOpen && !_messageFooterOpen;
                    clicked => {
                        running = true;

                        if (canCreateInstances == false) {
                            instances = 1;
                        }

                        startEmulator();
                    }
                }

                buttonRegister := Button {
                    text: "NEW STORED EMULATOR";
                    width: 400px;
                    height: 40px;
                    enabled: storageSize > 0 && ramSize > 0 && instances > 0 && !running && !initializing && !_newEmulatorOpen && !_listEmulatorsOpen && !_messageFooterOpen && !canCreateInstances;
                    clicked => {
                        _newEmulatorOpen = true;
                    }
                }

                buttonListEmulators := Button {
                    text: "LIST EMULATORS";
                    width: 400px;
                    height: 40px;
                    enabled: !_newEmulatorOpen && !running && !initializing && !canCreateInstances;
                    clicked => {
                        _listEmulatorsOpen = true;
                    }
                }
            }
        }

        if (running == true) :
        VerticalLayout {
            padding-top: 8px;
            alignment: LayoutAlignment.center;

            HorizontalLayout {
                padding-top: 45px;
                x: instancesInput.x;

                Text {
                    text: runningMessage;
                    font-size: 15px;
                }
            }

            if (settled == false) :
            HorizontalLayout {
                padding-top: 20px;
                alignment: LayoutAlignment.center;

                runnin := CustomProgressIndicator {
                    width: 400px;
                    height: 40px;
                    indeterminate: true;
                }
            }

            // this is only for aesthetic purposes
            if (settled == false) :
            HorizontalLayout {
                padding-top: 45px;
                Text {
                    text: "";
                    font-size: 15px;
                }
            }

            if (settled == true) :
            HorizontalLayout {
                padding-top: 105px;
                Text {
                    text: "";
                    font-size: 15px;
                }
            }
        }
    }

    // background fade
    if (_newEmulatorOpen || _messageFooterOpen || _listEmulatorsOpen) :
    Rectangle {
        background: @linear-gradient(backDeg * -1deg, #810c35, #3c0c1d,);
        opacity: 0.5;
        width: 100%;
        height: 100%;
    }

    messageFooter := Rectangle {
        x: 0px;
        width: 100%;
        height: 30%;
        clip: true;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        background: messageFooterLevel == "warn" ? #f0ad4e : messageFooterLevel == "error" ? #d9534f : messageFooterLevel == "success" ? #5cb85c : #5bc0de;

        states [
            messageFooter-opened when _messageFooterOpen: {
                messageFooter.y: root.height - (root.height * 0.3);
            }
            messageFooter-closed when !_messageFooterOpen: {
                messageFooter.y: root.height;
            }
        ]

        animate y {
            duration: 500ms;
            delay: 0s;
            easing: ease-in-out;
        }

        VerticalLayout {
            padding: 20px;
            spacing: 10px;

            HorizontalLayout {
                Text {
                    vertical-alignment: TextVerticalAlignment.center;
                    text: root.messageFooterText;
                    font-size: 20px;
                }
            }
        }
    }

    listEmulators := Rectangle {
        x: 0px;
        width: 100%;
        height: 50%;
        clip: true;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        background: #393939;

        states [
            list-emulators-opened when _listEmulatorsOpen: {
                listEmulators.y: root.height - (root.height * 0.5);
            }
            list-emulators-closed when !_listEmulatorsOpen: {
                listEmulators.y: root.height;
            }
        ]

        animate y {
            duration: 500ms;
            delay: 0s;
            easing: ease-in-out;
        }

        VerticalLayout {
            padding: 20px;
            spacing: 20px;
            alignment: LayoutAlignment.start;

            HorizontalLayout {
                Text {
                    text: "Stored Emulators";
                    font-size: 20px;
                }
            }

            HorizontalLayout {
                ListView {
                    width: root.width - 40px;
                    height: listEmulators.height - 70px;
                    for emulator in root.emulatorList: Rectangle {
                        HorizontalBox {
                            padding: 10px;
                            spacing: 10px;

                            Text {
                                text: emulator;
                                font-size: 15px;
                            }

                            Button {
                                width: 50px;
                                text: "Run";
                                clicked => {
                                    runStoredEmulator(emulator);
                                    _listEmulatorsOpen = false;
                                }
                            }

                            Button {
                                width: 80px;
                                text: "Delete";
                                clicked => {
                                    rmStoredEmulator(emulator);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // Registered Emulators "form"
    newEmulator := Rectangle {
        x: 0px;
        width: 100%;
        height: 30%;
        clip: true;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        background: #393939;

        states [
            new-emulator-opened when _newEmulatorOpen: {
                newEmulator.y: root.height - (root.height * 0.3);
            }
            new-emulator-closed when !_newEmulatorOpen: {
                newEmulator.y: root.height;
            }
        ]

        animate y {
            duration: 500ms;
            delay: 0s;
            easing: ease-in-out;
        }

        VerticalLayout {
            padding: 20px;
            spacing: 10px;

            HorizontalLayout {
                Text {
                    text: "New Emulator";
                    font-size: 20px;
                }
            }

            HorizontalLayout {
                Text {
                    text: "Emulator Name:";
                    font-size: 15px;
                }
            }

            HorizontalLayout {
                emulatorNameInput := LineEdit {
                    height: 40px;
                }
            }

            HorizontalLayout {
                Button {
                    text: "Save & Run Emulator";
                    height: 40px;
                    enabled: emulatorNameInput.text != "" && storageSize > 0 && ramSize > 0 && instances > 0 && !running && !initializing;
                    clicked => {
                        if(storeEmulator(emulatorNameInput.text)) {
                            _newEmulatorOpen = false;
                            emulatorNameInput.text = "";
                            running = true;
                            runStoredEmulator(emulatorNameInput.text);
                        } else {
                            _newEmulatorOpen = false;
                            _messageFooterOpen = true;
                        }
                    }
                }
            }
        }
    }
}
