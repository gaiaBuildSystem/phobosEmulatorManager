import {
    Button,
    HorizontalBox,
    VerticalBox,
    GridBox,
    ListView,
    AboutSlint,
    StandardListView,
    ScrollView,
    LineEdit,
    CheckBox,
    ProgressIndicator,
    SpinBox
 } from "std-widgets.slint";


export component AppWindow inherits Window {
    in-out property<bool> canCreateInstances : false;
    in-out property<length> Width : 599px;
    in-out property<length> Height : 679px;
    in-out property<int> storageSize : 8;
    in-out property<int> ramSize : 4;
    in-out property<int> instances : 1;
    in-out property<bool> running : false;
    in-out property<bool> settled : false;
    in-out property<bool> initializing : true;
    in-out property<string> runningMessage : "Running ...";
    in-out property<int> backDeg : 40;
    callback startEmulator();

    title: "PhobOS Emulator Manager";

    width <=> root.Width;
    height <=> root.Height;

    Rectangle {
        background: @linear-gradient(backDeg * -1deg, #810c35, #3c0c1d,);
    }

    TouchArea {
        pointer-event => {
            backDeg = ((self.mouse-x / self.height) * 180);
        }
    }

    public function __init() {
        debug("Initializing ...");
        vmLogo.opacity = 0.6;
        vmLogo.padding-right = 5px;
        phobosLogo.opacity = 0.6;
        initializing = false;
    }

    // I will not use the init because on Linux it demands some time
    // to render the window, so I'm using the __init from code behind
    // init => {

    // }

    VerticalLayout {
        alignment: LayoutAlignment.start;
        padding-top: 50px;
        spacing: 10px;

        HorizontalLayout {
            alignment: LayoutAlignment.center;
            padding-top: 30px;

            vmLogo := HorizontalBox {
                padding-top: -8px;
                padding-right: -40px;
                padding-left: -2px;
                opacity: 0;

                Image {
                    source: @image-url("./assets/monitor.png");
                    width: 110px;
                    height: 110px;
                }

                animate padding-right {
                    duration: 500ms;
                    delay: 1.5s;
                    easing: ease-in-out;
                }

                animate opacity  {
                    duration: 500ms;
                    delay: 1.5s;
                    easing: ease-in-out;
                }
            }

            phobosLogo := HorizontalBox {
                padding-right: 10px;
                padding-top: 18px;
                padding-left: 10px;
                opacity: 0;

                Image {
                    source: @image-url("./assets/phoboslogoWhite.png");
                    width: 410px * 0.7;
                    height: 81px * 0.7;
                }

                animate opacity  {
                     duration: 500ms;
                     delay: 1.5s;
                     easing: ease-in-out;
                }
            }
        }
    }

    VerticalLayout {
        alignment: LayoutAlignment.end;
        spacing: 10px;
        padding-bottom: 60px;

        HorizontalLayout {
            x: storageSizeInput.x;

            Text {
                text: "Storage Size (GB):";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            storageSizeInput := SpinBox {
                value <=> storageSize;
                enabled: !running;
                width: 400px;
                height: 40px;
            }
        }

        HorizontalLayout {
            x: ramSizeInput.x;

            Text {
                text: "RAM Size (GB):";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            ramSizeInput := SpinBox {
                value <=> ramSize;
                enabled: !running;
                width: 400px;
                height: 40px;
            }
        }

        HorizontalLayout {
            x: ramSizeInput.x;
            padding-top: 20px;

            canCreateInstancesCheck := CheckBox {
                text: "Start Multiple Instances";
                checked <=> canCreateInstances;
                toggled => {
                    instances = 1;
                }
            }
        }

        HorizontalLayout {
            padding-top: 20px;
            x: ramSizeInput.x;

            Text {
                text: "Number of Instances:";
                font-size: 15px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.center;

            instancesInput := SpinBox {
                enabled: canCreateInstances && !running;
                value <=> instances;
                width: 400px;
                height: 40px;
            }
        }

        if (running == false) :
        HorizontalLayout {
            alignment: LayoutAlignment.center;
            padding-top: 40px;

            buttonStart := Button {
                text: "START EMULATOR";
                width: 400px;
                height: 40px;
                enabled: storageSize > 0 && ramSize > 0 && instances > 0 && !running && !initializing;
                clicked => {
                    running = true;

                    if (canCreateInstances == false) {
                        instances = 1;
                    }

                    startEmulator();
                }
            }
        }

        if (running == true) :
        VerticalLayout {
            HorizontalLayout {
                padding-top: 40px;
                x: instancesInput.x;

                Text {
                    text: runningMessage;
                    font-size: 15px;
                }
            }

            if (settled == false) :
            HorizontalLayout {
                alignment: LayoutAlignment.center;

                runnin := ProgressIndicator {
                    width: 400px;
                    height: 40px;
                    indeterminate: true;
                }
            }
        }
    }
}
